--DROP DATABASE "polizas";

-- CREACION DE TABLAS DE LA BD DE POLIZAS

--DROP TABLE IF EXISTS Inventario;
CREATE TABLE Inventario (
	SKU INT GENERATED BY DEFAULT AS IDENTITY NOT NULL UNIQUE, 
	nombre varchar(25),
	cantidad integer default 0
);

alter table Inventario add constraint PK_SKU primary key (SKU);

--DROP TABLE IF EXISTS Empleado;
CREATE TABLE Empleado (
	idEmpleado INT GENERATED BY DEFAULT AS IDENTITY NOT NULL UNIQUE, 
	nombreEmp varchar(25) NOT NULL, 
	apellidoPatEmp varchar(25) NOT NULL,
	apellidoMatEmp varchar(25)	NOT NULL,
	puesto smallint NOT NULL
);

alter table Empleado add constraint PK_idEmpleado primary key (idEmpleado);

--DROP TABLE IF EXISTS Polizas;
CREATE TABLE Polizas (
	idPolizas INT GENERATED BY DEFAULT AS IDENTITY NOT NULL UNIQUE,
	empleadoGenero INT NOT NULL,
	SKU integer NOT NULL,
	cantidad integer,
	fecha timestamp
);

alter table Polizas add constraint PK_idPolizas primary key (idPolizas);
alter table Polizas add constraint FK_empleadoGenero_polizas foreign key (empleadoGenero) REFERENCES Empleado(idEmpleado);
alter table Polizas add constraint FK_SKU_polizas foreign key (SKU) REFERENCES Inventario(SKU);

CREATE VIEW view_polizas AS 
SELECT p.idpolizas, p.cantidad,
	   i.sku, i.nombre AS nombreArticulo
FROM polizas AS p 
INNER JOIN inventario AS i ON p.sku = i.sku;


-- CREACION DE FUNCIONES



CREATE OR REPLACE FUNCTION generar_poliza(idEmp Integer, idArt Integer, cant Integer)
RETURNS Integer AS $$
DECLARE 
	idpol Integer;
	response Integer := -1;
	cantidadAux integer;
	nomEmp varchar;
	text_var1 text;
	text_var2 text;
	text_var3 text;
	coderesponse Integer := 0;
BEGIN
		RAISE NOTICE 'sKU = %', idArt;
		SELECT cantidad INTO cantidadAux FROM inventario WHERE sku = idArt;
		IF NOT FOUND THEN 
			RETURN -1;
		END IF;
		RAISE NOTICE '%, %', cantidadAux, cant;
		IF cantidadAux < cant THEN 
			RETURN -2;
		END IF;
		SELECT nombreemp INTO nomEmp FROM empleado WHERE idempleado = idemp;
		IF NOT FOUND THEN
			coderesponse = -3;
			ROLLBACK;
		END IF;
		UPDATE inventario SET cantidad = cantidad - cant WHERE sku = idArt;
		INSERT INTO polizas(empleadogenero, sku, cantidad, fecha) 
		VALUES (idEmp, idArt, cant, current_timestamp);
		SELECT idpolizas INTO response FROM polizas ORDER BY idpolizas DESC LIMIT 1;
		RETURN response;
		
		RAISE NOTICE 'RESPONSE %', response;
		EXCEPTION WHEN OTHERS THEN
			GET STACKED DIAGNOSTICS text_var1 = MESSAGE_TEXT,
                          text_var2 = PG_EXCEPTION_DETAIL,
                          text_var3 = PG_EXCEPTION_HINT;
			RAISE NOTICE '%, %, %', text_var1, text_var2, text_var3;
			if coderesponse <> 0 then 
				return coderesponse;
			END IF;
			RETURN -4;
END;
$$ LANGUAGE plpgsql;

 --Select generar_poliza(2,3,10)
-- SELECT actualizar_poliza(4,3,3,6)
-- Select eliminar_poliza(3)
-- select * from polizas
-- select * from inventario
--select generar_poliza('HUMBERTO', 'MORENO', 'TRAPEADOR', 3)

CREATE OR REPLACE FUNCTION actualizar_poliza(idpol Integer, idEmp Integer, idArt Integer, cant Integer)
RETURNS Integer
AS $$
DECLARE 
	skuPol Integer;
	empPol Integer;
	cantidadPol integer;
	response Integer := -1;
	cantidadInve integer;
	coderesponse integer := 0;
	text_var1 text;
	text_var2 text;
	text_var3 text;
BEGIN	
		--RAISE info 'idpol: % idEmp: %  idArt: % cant: %',idpol, idEmp, idArt, cant;
		SELECT sku, empleadogenero, cantidad INTO skuPol, empPol, cantidadPol FROM polizas WHERE idpolizas = idpol;
		IF NOT FOUND THEN 
			RAISE INFO 'Poliza no encontrada';
			RETURN -1;
		END IF;
		SELECT cantidad INTO cantidadInve FROM inventario WHERE sku = idArt;
		IF NOT FOUND THEN	
			RAISE INFO 'Articulo no encontrado';
			RETURN -3;
		END IF;
		IF empPol <> idEmp THEN 
			SELECT idempleado INTO empPol FROM empleado where idempleado = idEmp;
			IF NOT FOUND THEN 
				RAISE INFO 'Empleado no encontrado';
				RETURN -2;
			END IF;
			UPDATE polizas SET empleadogenero = idEmp;
		END IF;
		RAISE INFO 'skuPol: %  idArt: %', skuPol, idArt;
		IF skuPol = idArt THEN
			RAISE INFO 'igual = cantidad Pol: %  cantidad enviada: %', cantidadPol, cant;
			IF (cantidadPol - cant) + cantidadInve < 0 THEN 
				-- la cantidad es menor que lo que se cuenta en inventario
				coderesponse = -4;
				ROLLBACK;
			END IF;
			UPDATE inventario SET cantidad = (cantidadPol - cant) + cantidad WHERE sku = idArt;
			UPDATE polizas SET cantidad = cant WHERE idpolizas = idpol;
			RETURN coderesponse;
		ELSE 
			RAISE INFO 'else = cantidad Pol: %  cantidad enviada: %', cantidadPol, cant;
			UPDATE inventario SET cantidad = cantidad + cantidadPol where sku = skuPol;
			SELECT cantidad INTO cantidadInve FROM inventario WHERE sku = idArt;
			IF cantidadInve < cant THEN 
				-- la cantidad es menor que lo que se cuenta en inventario
				coderesponse = -4;
				ROLLBACK;
			END IF;
			UPDATE inventario SET cantidad = cantidad - cant WHERE sku = idArt;
			UPDATE polizas SET sku = idArt, cantidad = cant WHERE idpolizas = idpol;
			RETURN coderesponse;
		END IF;
		EXCEPTION WHEN OTHERS THEN
			GET STACKED DIAGNOSTICS text_var1 = MESSAGE_TEXT,
                          text_var2 = PG_EXCEPTION_DETAIL,
                          text_var3 = PG_EXCEPTION_HINT;
			RAISE NOTICE '%, %, %', text_var1, text_var2, text_var3;
			IF coderesponse <> 0 THEN
				RETURN coderesponse;
			END IF;
			RETURN -5;
		COMMIT;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION eliminar_poliza(idpol Integer)
RETURNS Integer AS $$
DECLARE
	idArt Integer;
	cantidadPol Integer;
BEGIN
	SELECT sku, cantidad INTO idArt, cantidadPol FROM polizas 
	WHERE idpolizas = idpol;
	IF NOT FOUND THEN
		RETURN -1;
	END IF;
	UPDATE inventario SET cantidad = cantidad + cantidadPol WHERE sku = idArt;
	DELETE FROM polizas WHERE idpolizas = idpol; 
	RETURN 1;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION lista_polizas() 
RETURNS SETOF view_polizas
AS
$BODY$
BEGIN
	RETURN QUERY
	SELECT * FROM view_polizas ORDER BY idpolizas DESC;
END;
$BODY$
LANGUAGE plpgsql;

-- Agregando Datos a la Tablas

 -- Delete from inventario where sku > 3

INSERT INTO Inventario (nombre, cantidad) VALUES ('TRAPEADOR', 15);
INSERT INTO Inventario (nombre, cantidad) VALUES('ESTUFA', 5);
INSERT INTO Inventario (nombre, cantidad) VALUES ('REFRIGERADOR', 6);


update inventario SET cantidad = 5 where sku = 2;
update inventario SET cantidad = 6 where sku = 3;
update inventario SET cantidad = 15 where sku = 1;

INSERT INTO Empleado (nombreEmp, apellidoPatEmp, apellidoMatEmp, puesto) VALUES ('HUMBERTO', 'MORENO', 'GALVEZ', 1);
INSERT INTO Empleado  (nombreEmp, apellidoPatEmp, apellidoMatEmp, puesto) VALUES ('DANIEL', 'GOMEZ', 'PADILLA', 1);

-- select pg_terminate_backend(pid) from pg_stat_activity where datname='db_polizas'